// import * as React from 'react';
// import {
//   StyleSheet, Text, View, TouchableOpacity, ActivityIndicator, Platform,
// } from 'react-native';
// import { Audio, Permissions, FileSystem } from 'expo';

import React from "react";
import { Text, View, StyleSheet, Button, Platform } from "react-native";
import { Audio } from "expo-av";
import * as Permissions from "expo-permissions";
import { Recording, Sound } from "expo-av/build/Audio";
import * as FileSystem from "expo-file-system";

const recordingOptions = {
  android: {
    extension: ".m4a",
    outputFormat: Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,
    audioEncoder: Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,
    sampleRate: 44100,
    numberOfChannels: 1,
    bitRate: 128000,
  },
  ios: {
    extension: ".wav",
    audioQuality: Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH,
    sampleRate: 44100,
    numberOfChannels: 1,
    bitRate: 128000,
    linearPCMBitDepth: 16,
    linearPCMIsBigEndian: false,
    linearPCMIsFloat: false,
  },
};

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    backgroundColor: "#fff",
    alignItems: "center",
  },
  button: {
    backgroundColor: "#1e88e5",
    paddingVertical: 20,
    width: "90%",
    alignItems: "center",
    borderRadius: 5,
    padding: 8,
    marginTop: 20,
  },
  text: {
    color: "#fff",
  },
});

const ROOT_URL = "http://localhost:8080";

const NoteView = () => {
  const [recording, setRecording] = React.useState<Recording>();
  const [isFetching, setIsFetching] = React.useState(false);
  const [transcript, setTranscript] = React.useState("");

  Permissions.askAsync(Permissions.AUDIO_RECORDING);

  async function startRecording() {
    try {
      console.log("Requesting permissions..");
      await Audio.requestPermissionsAsync();
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,
        playsInSilentModeIOS: true,
        interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,
        playThroughEarpieceAndroid: true,
      });
      console.log("Starting recording..");
      const recording = new Audio.Recording();
      await recording.prepareToRecordAsync(recordingOptions);
      await recording.startAsync();
      setRecording(recording);
      console.log("Recording started");
    } catch (err) {
      console.error("Failed to start recording", err);
    }
  }

  async function stopRecording() {
    if (recording === null || recording === undefined) return "error";
    console.log("Stopping recording..");
    await recording.stopAndUnloadAsync();
    const uri = recording.getURI();
    setRecording(undefined);
    fetchDatas(uri);
    console.log("Recording stopped and stored at", uri);
  }

  const fetchDatas = async (aUri: string | null) => {
    setIsFetching(true);
    try {
      const { uri } = await FileSystem.getInfoAsync(aUri);
      const formData = new FormData();
      formData.append(
        "file",
        {
          uri,
          type: Platform.OS === "ios" ? "audio/x-wav" : "audio/m4a",
          name:
            Platform.OS === "ios" ? `${Date.now()}.wav` : `${Date.now()}.m4a`,
        },
        Platform.OS === "ios" ? `${Date.now()}.wav` : `${Date.now()}.m4a`
      );

      console.log("JPP:", formData);

      const requestOptions = {
        method: "POST",
        headers: {
          "Content-Type": "multipart/form-data",
          // Authorization: `Bearer ${token}`,
        },
        body: formData,
      };

      const response = await fetch(
        "http://f83d7df1e1e8.ngrok.io/speech/upload",
        requestOptions
      );
      const data = await response.json();

      setTranscript(data.transcript);
      setIsFetching(false);
      if (data.status === "success") return data;
      return "error";
    } catch (error) {
      console.log("There was an error reading file", error);
      setIsFetching(false);
      return "error";
    }
  };

  return (
    <View>
      <Button
        title={recording ? "Stop Recording" : "Start Recording"}
        onPress={recording ? stopRecording : startRecording}
      />
    </View>
  );
};

export default NoteView;
